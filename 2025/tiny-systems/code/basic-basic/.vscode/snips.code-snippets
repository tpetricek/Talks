{
	// Place your basic-basic workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "Step 1: Parsing": {
    "prefix": "step1-parsing",
    "body": [
      "let (|Prefix|_|) (prefix:string) (s:string) = ",
      "  if s.StartsWith prefix then Some(s.Substring(prefix.Length).Trim())",
      "  else None",
      "",
      "let (|Number|_|) (s:string) = ",
      "  let i = s |> Seq.takeWhile System.Char.IsNumber |> Seq.length  ",
      "  match System.Int32.TryParse(s.Substring(0, i)) with ",
      "  | true, n -> Some(n, s.Substring(i).Trim())",
      "  | _ -> None",
      "",
      "let (|Quoted|_|) q (s:string) =",
      "  if s.[0] = q then",
      "    let i = s.IndexOf(q, 1)",
      "    if i > -1 then Some(s.Substring(1, i-1), s.Substring(i+1).Trim())",
      "    else None",
      "  else None    ",
    ]
  },
  "Step 2: Parse command": {
    "prefix": "step2-command",
    "body": [
      "| Prefix \"INPUT\" var -> Input(var)",
      "| Prefix \"GOTO\" (Number(line, \"\")) -> Goto(line)",
      "| Prefix \"RUN\" \"\" -> Run",
      "| _ -> failwith $\"Unknown command: {cmd}\"    ",
    ]
  },
  "Step 3: Evaluation state": {
    "prefix": "step3-evalstate",
    "body": [
      "type State = ",
      "  { Variables : Map<string, Value>",
      "    Lines : list<int * Command> }",          
    ]
  },
  "Step 4: Next operation": {
    "prefix": "step4-next",
    "body": [
      "let next ctx = ",
      "  if line <> -1 then ",
      "    let rest = ctx.Lines |> List.filter (fun (ln, _) -> ln > line) ",
      "    if rest.Length = 0 then ctx else",
      "    run ctx (Seq.minBy fst rest)",
      "  else ctx  ",
    ]
  },
  "Step 5: Main loop": {
    "prefix": "step5-main",
    "body": [
      "let rec main ctx : unit =",
      "  let s = System.Console.ReadLine()",
      "  match parse s with ",
      "  | Some ln, cmd -> main { ctx with Lines = (ln,cmd) :: ctx.Lines }",
      "  | None, cmd -> main (run ctx (-1, cmd))",
      "",
      "main { Lines = []; Variables = Map.empty }      ",
    ]
  }
}